name: Biohazrd
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['*']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: ""
      will_publish_packages:
        description: "Publish packages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
  # This URL will be added to the restore sources if it isn't the official NuGet.org
  # (This is mainly intended to allow using the NuGet.org test servers to test CI in forks.)
  CiNuGetApiUrl: ${{secrets.NUGET_API_URL}}
jobs:
  # =====================================================================================================================================================================
  # Build and Test Biohazrd
  # =====================================================================================================================================================================
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
          - name: Linux x64
            os: ubuntu-latest
            rid: linux-x64
          - name: Linux ARM64
            os: ubuntu-arm64-latest
            rid: linux-arm64
            skip-tool-install: true
          - name: macOS x64
            os: macos-10.15
            rid: osx-x64
        configuration: ['Debug', 'Release']
        include:
          # Create packages from Linux Release x64
          - platform:
              rid: linux-x64
            configuration: Release
            create-packages: true
    name: ${{matrix.platform.name}} ${{matrix.configuration}}
    runs-on: ${{matrix.platform.os}}
    env:
      WillCreatePackages: ${{matrix.create-packages}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        if: matrix.platform.skip-tool-install != true
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        if: matrix.platform.skip-tool-install != true
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x

      # ----------------------------------------------------------------------- Setup other dependencies
      - name: Setup other dependencies (Linux)
        if: matrix.platform.skip-tool-install != true && runner.os == 'Linux'
        # This installs lld and llvm-ar, which are used by LinkImportsTransformationElfTests
        run: sudo apt-get install --yes lld llvm

      - name: Setup other dependencies (macOS)
        if: matrix.platform.skip-tool-install != true && runner.os == 'macOS'
        # The LLVM toolchain provided by Xcode is stripped down and doesn't include things like lld or llvm-ar
        # However, the runners do have a full LLVM toolchian installed via brew, so we use that for tests which require these tools
        run: python .github/workflows/gha.py set_environment_variable BIOHAZRD_FULL_LLVM_TOOLCHAIN_PATH "$(brew --prefix llvm)"

      # ----------------------------------------------------------------------- Configure build
      - name: Configure build
        run: python .github/workflows/configure-build.py
        env:
          github_event_name: ${{github.event_name}}
          github_ref: ${{github.ref}}
          github_run_number: ${{github.run_number}}
          release_version: ${{github.event.release.tag_name}}
          workflow_dispatch_version: ${{github.event.inputs.version}}
          workflow_dispatch_will_publish_packages: ${{github.event.inputs.will_publish_packages}}

      # ----------------------------------------------------------------------- Build
      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration ${{matrix.configuration}}

      - name: Pack
        id: pack
        if: matrix.create-packages
        run: dotnet pack --no-build --configuration ${{matrix.configuration}}

      # ----------------------------------------------------------------------- Test
      - name: Test
        run: dotnet test --no-restore --no-build --configuration ${{matrix.configuration}} --verbosity normal

      # ----------------------------------------------------------------------- Collect Artifacts
      - name: Collect NuGet Packages
        uses: actions/upload-artifact@v2
        # We always want to collect packages when they were produced
        if: steps.pack.outcome == 'success' && always()
        with:
          name: Packages
          if-no-files-found: error
          path: packages/**

  # =====================================================================================================================================================================
  # Publish NuGet Packages to GitHub
  # =====================================================================================================================================================================
  publish-packages-github:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: build-and-test
    # Pushes always publish CI packages (configure-build.py will add the branch name to the version string for branches besides main)
    # Published releases always publish packages
    # A manual workflow only publishes packages if explicitly enabled
    if: github.event_name == 'push' || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.will_publish_packages == 'true')
    steps:
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: Packages

      # ----------------------------------------------------------------------- Upload release assets
      - name: Upload release assets
        if: github.event_name == 'release'
        uses: actions/github-script@v4
        with:
          user-agent: actions/github-script for ${{github.repository}}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            const upload_url = context.payload.release.upload_url;

            if (!upload_url) {
                throw "Missing release asset upload URL!";
            }

            for (let filePath of await fs.readdir('.')) {
                const fileExtension = path.extname(filePath);
                if (fileExtension != '.nupkg' && fileExtension != '.snupkg') {
                    continue;
                }

                console.log(`Uploading '${filePath}'`);
                const contentLength = (await fs.stat(filePath)).size;
                const fileContents = await fs.readFile(filePath);
                await github.repos.uploadReleaseAsset({
                    url: upload_url,
                    headers: {
                        'content-type': 'application/octet-stream',
                        'content-length': contentLength
                    },
                    name: path.basename(filePath),
                    data: fileContents
                });
            }

      # ----------------------------------------------------------------------- Push to GitHub Packages
      - name: Push to GitHub Packages
        run: dotnet nuget push "*.nupkg" --skip-duplicate --no-symbols --api-key ${{secrets.GITHUB_TOKEN}} --source https://nuget.pkg.github.com/${{github.repository_owner}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  # =====================================================================================================================================================================
  # Publish NuGet Packages to NuGet.org
  # =====================================================================================================================================================================
  publish-packages-nuget-org:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: NuGet.org
    # Release builds always publish packages to NuGet.org
    # Workflow dispatch builds will only publish packages if enabled and an explicit version number is given
    # Make sure this logic matches configure-build.py to ensure we don't accidentally depend on sibling CI pre-release packages
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.will_publish_packages == 'true' && github.event.inputs.version != '')
    steps:
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: Packages

      # ----------------------------------------------------------------------- Push to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source ${{secrets.NUGET_API_URL}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  # =====================================================================================================================================================================
  # Send CI Failure Notification
  # =====================================================================================================================================================================
  send-ci-failure-notification:
    name: Send CI Failure Notification
    needs: [build-and-test, publish-packages-github, publish-packages-nuget-org]
    if: failure() && github.event_name != 'pull_request'
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # ----------------------------------------------------------------------- Send CI Failure Notification
      - name: Send Notification
        run: python .github/workflows/send-ci-failure-notification.py
        env:
          webhook_url: ${{secrets.TEAMS_WEBHOOK_URL}}
          github_organization: ${{github.repository_owner}}
          github_repo: ${{github.repository}}
          github_workflow_name: ${{github.workflow}}
          github_run_number: ${{github.run_id}}
